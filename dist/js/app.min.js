"use strict";$(function(){$(function(){function i(t,e,n,i){t.css({transform:"translate("+e*i+"px, "+n*i+"px )"})}$(window).on({load:function(){setTimeout(function(){$(".spinner").addClass("hide")},1e3)}}),$(".site__title").each(function(){new n($(this))}),$(".menu").each(function(){new e($(this))}),$(".news").each(function(){new t($(this))});var o=$(".collection").offset().top,s=$(".collection").height(),a=$(".must-have").offset().top,c=$(".must-have").height(),l=$(".most-wanted").offset().top,f=$(".most-wanted").height(),_=$(".sale").offset().top,u=$(".sale").height(),h=$(".site__header").offset().top,r=$(".site__header").height(),p=$(window).height();$("body").mCustomScrollbar({callbacks:{whileScrolling:function(){var t=parseInt(-1*this.mcs.top);o+s>=t&&p+t>=o&&(i($(".collection .site__title"),0,t-(o-p),.3*s/(s+p)),i($(".collection__pic"),0,t-(o-p),.15*s/(s+p)),i($(".collection__wrap"),t-(o-p),0,.05*s/(s+p))),a+c>=t&&p+t>=a&&(i($(".must-have .site__title"),0,t-(a-p),.3*c/(c+p)),i($(".must-have__bg").eq(0),0,t-(a-p),c*-.1/(c+p)),i($(".must-have__bg").eq(1),0,t-(a-p),.1*c/(c+p))),l+f>=t&&p+t>=l&&i($(".most-wanted .site__title"),0,t-(l-p),.3*f/(f+p)),_+u>=t&&p+t>=_&&(i($(".sale .site__title"),0,t-(_-p),.3*u/(u+p)),i($(".sale__bg"),0,t-(_-p),.15*u/(u+p))),h+r>=t&&p+t>=h&&i($(".site__header-bg"),0,t,.5*r/(r+p))}}})});var t=function(t){var e=t,n=e.find(".news__item"),i=function(){n.each(function(){var t=$(this),e=t.find("img"),n='<div class="news__item-face"></div>';t.prepend(n),t.prepend(e.clone()),t.find(".news__item-face").prepend(e.clone())})},o=function(){i()};o()},e=function(t){var e=t,n=$(".site"),i=e.find(".menu__wrap"),o=function(){e.on({click:function(){e.toggleClass("open"),n.toggleClass("blur")}}),i.on({click:function(t){var t=t||window.event;t.stopPropagation?t.stopPropagation():t.cancelBubble=!0}})},s=function(){o()};s()},n=function(t){var e=t,n=function(){var t=e.text().replace(/\s/g,""),n=t.split(""),i=n.length;e.text("");for(var o=0;i>o;o++)e.append("<span>"+n[o]+"</span>")},i=function(){n(e)};i()}});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyIkIiwicGFyYWxheCIsImVsZW0iLCJ4IiwieSIsImtvZWYiLCJjc3MiLCJ0cmFuc2Zvcm0iLCJ3aW5kb3ciLCJvbiIsImxvYWQiLCJzZXRUaW1lb3V0IiwiYWRkQ2xhc3MiLCJlYWNoIiwiU2l0ZVRpdGxlIiwidGhpcyIsIk1lbnUiLCJOZXdzIiwiY29sbGVjdGlvblRvcCIsIm9mZnNldCIsInRvcCIsImNvbGxlY3Rpb25IZWlnaHQiLCJoZWlnaHQiLCJtdXN0SGF2ZVRvcCIsIm11c3RIYXZlSGVpZ2h0IiwibW9zdFdhbnRlZFRvcCIsIm1vc3RXYW50ZWRIZWlnaHQiLCJzYWxlVG9wIiwic2FsZUhlaWdodCIsImhlYWRlclRvcCIsImhlYWRlckhlaWdodCIsIndpbkhlaWdodCIsIm1DdXN0b21TY3JvbGxiYXIiLCJjYWxsYmFja3MiLCJ3aGlsZVNjcm9sbGluZyIsInNjcm9sbFBvc2l0aW9uIiwicGFyc2VJbnQiLCJtY3MiLCJlcSIsIm9iaiIsIl9vYmoiLCJfaXRlbSIsImZpbmQiLCJfY3JlYXRlIiwiY3VyRWxlbSIsImN1clBpYyIsImZhY2VFbGVtIiwicHJlcGVuZCIsImNsb25lIiwiX2luaXQiLCJfc2l0ZSIsIl93cmFwIiwiX2FkZEV2ZW50cyIsImNsaWNrIiwidG9nZ2xlQ2xhc3MiLCJldmVudCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsIl9jcmVhdGVMaW5lIiwibGluZSIsInRleHQiLCJyZXBsYWNlIiwiYXJyIiwic3BsaXQiLCJhcnJMZW5ndGgiLCJsZW5ndGgiLCJpIiwiYXBwZW5kIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFBQSxHQUFFLFdBR0VBLEVBQUUsV0F5RUUsUUFBU0MsR0FBU0MsRUFBTUMsRUFBR0MsRUFBR0MsR0FFMUJILEVBQUtJLEtBQ0RDLFVBQWEsYUFBZUosRUFBRUUsRUFBTyxPQUFTRCxFQUFFQyxFQUFRLFNBMUVoRUwsRUFBRVEsUUFBUUMsSUFDTkMsS0FBUSxXQUNKQyxX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TyxTQUFVdUIsR0FHakIsR0FBSUMsR0FBT0QsRUFDUFcsRUFBUWxELEVBQUcsU0FDWG1ELEVBQVFYLEVBQUtFLEtBQU0sZUFHbkJVLEVBQWEsV0FDVFosRUFBSy9CLElBQ0Q0QyxNQUFPLFdBQ0hiLEVBQUtjLFlBQWEsUUFDbEJKLEVBQU1JLFlBQWEsV0FJM0JILEVBQU0xQyxJQUNGNEMsTUFBTyxTQUFVRSxHQUNiLEdBQUlBLEdBQVFBLEdBQVMvQyxPQUFPK0MsS0FFdkJBLEdBQU1DLGdCQUNQRCxFQUFNQyxrQkFFTkQsRUFBTUUsY0FBZSxNQU1yQ1IsRUFBUSxXQUNKRyxJQUdSSCxNQUdBbkMsRUFBWSxTQUFTeUIsR0FHckIsR0FBSUMsR0FBT0QsRUFHUG1CLEVBQWMsV0FDVixHQUFJQyxHQUFPbkIsRUFBS29CLE9BQU9DLFFBQVEsTUFBTyxJQUNsQ0MsRUFBTUgsRUFBS0ksTUFBTSxJQUNqQkMsRUFBWUYsRUFBSUcsTUFFcEJ6QixHQUFLb0IsS0FBSyxHQUVWLEtBQU0sR0FBSU0sR0FBSSxFQUFPRixFQUFKRSxFQUFlQSxJQUM1QjFCLEVBQUsyQixPQUFPLFNBQVdMLEVBQUlJLEdBQUssWUFHeENqQixFQUFRLFdBQ0pTLEVBQVlsQixHQU9wQlMiLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiQoZnVuY3Rpb24oKXtcbiAgICAndXNlIHN0cmljdCc7XG5cbiAgICAkKGZ1bmN0aW9uKCl7XG5cbiAgICAgICAgJCh3aW5kb3cpLm9uKCB7XG4gICAgICAgICAgICAnbG9hZCc6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAkKCAnLnNwaW5uZXInKS5hZGRDbGFzcyggJ2hpZGUnICk7XG4gICAgICAgICAgICAgICAgfSwgMTAwMCApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9ICk7XG5cbiAgICAgICAgJCgnLnNpdGVfX3RpdGxlJykuZWFjaCggZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBuZXcgU2l0ZVRpdGxlKCAkKHRoaXMpICk7XG4gICAgICAgIH0gKTtcblxuICAgICAgICAkKCcubWVudScpLmVhY2goIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbmV3IE1lbnUoICQodGhpcykgKTtcbiAgICAgICAgfSApO1xuXG4gICAgICAgICQoJy5uZXdzJykuZWFjaCggZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBuZXcgTmV3cyggJCh0aGlzKSApO1xuICAgICAgICB9ICk7XG5cbiAgICAgICAgdmFyIGNvbGxlY3Rpb25Ub3AgPSAkKCcuY29sbGVjdGlvbicpLm9mZnNldCgpLnRvcCxcbiAgICAgICAgICAgIGNvbGxlY3Rpb25IZWlnaHQgPSAkKCcuY29sbGVjdGlvbicpLmhlaWdodCgpLFxuICAgICAgICAgICAgbXVzdEhhdmVUb3AgPSAkKCcubXVzdC1oYXZlJykub2Zmc2V0KCkudG9wLFxuICAgICAgICAgICAgbXVzdEhhdmVIZWlnaHQgPSAkKCcubXVzdC1oYXZlJykuaGVpZ2h0KCksXG4gICAgICAgICAgICBtb3N0V2FudGVkVG9wID0gJCgnLm1vc3Qtd2FudGVkJykub2Zmc2V0KCkudG9wLFxuICAgICAgICAgICAgbW9zdFdhbnRlZEhlaWdodCA9ICQoJy5tb3N0LXdhbnRlZCcpLmhlaWdodCgpLFxuICAgICAgICAgICAgc2FsZVRvcCA9ICQoJy5zYWxlJykub2Zmc2V0KCkudG9wLFxuICAgICAgICAgICAgc2FsZUhlaWdodCA9ICQoJy5zYWxlJykuaGVpZ2h0KCksXG4gICAgICAgICAgICBoZWFkZXJUb3AgPSAkKCcuc2l0ZV9faGVhZGVyJykub2Zmc2V0KCkudG9wLFxuICAgICAgICAgICAgaGVhZGVySGVpZ2h0ID0gJCgnLnNpdGVfX2hlYWRlcicpLmhlaWdodCgpLFxuICAgICAgICAgICAgd2luSGVpZ2h0ID0gJCh3aW5kb3cpLmhlaWdodCgpO1xuXG4gICAgICAgICQoICdib2R5JyApLm1DdXN0b21TY3JvbGxiYXIoe1xuICAgICAgICAgICAgY2FsbGJhY2tzOntcbiAgICAgICAgICAgICAgICB3aGlsZVNjcm9sbGluZzpmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsUG9zaXRpb24gPSBwYXJzZUludCh0aGlzLm1jcy50b3AqKC0xKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy9jb2xsZWN0aW9uXG4gICAgICAgICAgICAgICAgICAgIGlmICggKCBzY3JvbGxQb3NpdGlvbiA8PSAoIGNvbGxlY3Rpb25Ub3AgKyBjb2xsZWN0aW9uSGVpZ2h0ICkgJiYgKCAoIHdpbkhlaWdodCArIHNjcm9sbFBvc2l0aW9uICkgPj0gY29sbGVjdGlvblRvcCApICkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbGF4KCAkKCcuY29sbGVjdGlvbiAuc2l0ZV9fdGl0bGUnKSwgMCwgc2Nyb2xsUG9zaXRpb24gLSAoY29sbGVjdGlvblRvcCAtIHdpbkhlaWdodCksIGNvbGxlY3Rpb25IZWlnaHQqMC4zLyhjb2xsZWN0aW9uSGVpZ2h0ICsgd2luSGVpZ2h0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbGF4KCAkKCcuY29sbGVjdGlvbl9fcGljJyksIDAsIHNjcm9sbFBvc2l0aW9uIC0gKGNvbGxlY3Rpb25Ub3AgLSB3aW5IZWlnaHQpLCBjb2xsZWN0aW9uSGVpZ2h0KjAuMTUvKGNvbGxlY3Rpb25IZWlnaHQgKyB3aW5IZWlnaHQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFsYXgoICQoJy5jb2xsZWN0aW9uX193cmFwJyksIHNjcm9sbFBvc2l0aW9uIC0gKGNvbGxlY3Rpb25Ub3AgLSB3aW5IZWlnaHQpLCAwLCBjb2xsZWN0aW9uSGVpZ2h0KjAuMDUvKGNvbGxlY3Rpb25IZWlnaHQgKyB3aW5IZWlnaHQpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vbXVzdC1oYXZlXG4gICAgICAgICAgICAgICAgICAgIGlmICggKCBzY3JvbGxQb3NpdGlvbiA8PSAoIG11c3RIYXZlVG9wICsgbXVzdEhhdmVIZWlnaHQgKSAmJiAoICggd2luSGVpZ2h0ICsgc2Nyb2xsUG9zaXRpb24gKSA+PSBtdXN0SGF2ZVRvcCApICkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbGF4KCAkKCcubXVzdC1oYXZlIC5zaXRlX190aXRsZScpLCAwLCBzY3JvbGxQb3NpdGlvbiAtIChtdXN0SGF2ZVRvcCAtIHdpbkhlaWdodCksIG11c3RIYXZlSGVpZ2h0KjAuMy8obXVzdEhhdmVIZWlnaHQgKyB3aW5IZWlnaHQpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFsYXgoICQoJy5tdXN0LWhhdmVfX2JnJykuZXEoMCksIDAsIHNjcm9sbFBvc2l0aW9uIC0gKG11c3RIYXZlVG9wIC0gd2luSGVpZ2h0KSwgbXVzdEhhdmVIZWlnaHQqKC0wLjEpLyhtdXN0SGF2ZUhlaWdodCArIHdpbkhlaWdodCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYWxheCggJCgnLm11c3QtaGF2ZV9fYmcnKS5lcSgxKSwgMCwgc2Nyb2xsUG9zaXRpb24gLSAobXVzdEhhdmVUb3AgLSB3aW5IZWlnaHQpLCBtdXN0SGF2ZUhlaWdodCowLjEvKG11c3RIYXZlSGVpZ2h0ICsgd2luSGVpZ2h0KSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAvL21vc3Qtd2FudGVkXG4gICAgICAgICAgICAgICAgICAgIGlmICggKCBzY3JvbGxQb3NpdGlvbiA8PSAoIG1vc3RXYW50ZWRUb3AgKyBtb3N0V2FudGVkSGVpZ2h0ICkgJiYgKCAoIHdpbkhlaWdodCArIHNjcm9sbFBvc2l0aW9uICkgPj0gbW9zdFdhbnRlZFRvcCApICkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbGF4KCAkKCcubW9zdC13YW50ZWQgLnNpdGVfX3RpdGxlJyksIDAsIHNjcm9sbFBvc2l0aW9uIC0gKG1vc3RXYW50ZWRUb3AgLSB3aW5IZWlnaHQpLCBtb3N0V2FudGVkSGVpZ2h0KjAuMy8obW9zdFdhbnRlZEhlaWdodCArIHdpbkhlaWdodCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy9zYWxlXG4gICAgICAgICAgICAgICAgICAgIGlmICggKCBzY3JvbGxQb3NpdGlvbiA8PSAoIHNhbGVUb3AgKyBzYWxlSGVpZ2h0ICkgJiYgKCAoIHdpbkhlaWdodCArIHNjcm9sbFBvc2l0aW9uICkgPj0gc2FsZVRvcCApICkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbGF4KCAkKCcuc2FsZSAuc2l0ZV9fdGl0bGUnKSwgMCwgc2Nyb2xsUG9zaXRpb24gLSAoc2FsZVRvcCAtIHdpbkhlaWdodCksIHNhbGVIZWlnaHQqMC4zLyhzYWxlSGVpZ2h0ICsgd2luSGVpZ2h0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbGF4KCAkKCcuc2FsZV9fYmcnKSwgMCwgc2Nyb2xsUG9zaXRpb24gLSAoc2FsZVRvcCAtIHdpbkhlaWdodCksIHNhbGVIZWlnaHQqMC4xNS8oc2FsZUhlaWdodCArIHdpbkhlaWdodCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy9oZWFkZXJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCAoIHNjcm9sbFBvc2l0aW9uIDw9ICggaGVhZGVyVG9wICsgaGVhZGVySGVpZ2h0ICkgJiYgKCAoIHdpbkhlaWdodCArIHNjcm9sbFBvc2l0aW9uICkgPj0gaGVhZGVyVG9wICkgKSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFsYXgoICQoJy5zaXRlX19oZWFkZXItYmcnKSwgMCwgc2Nyb2xsUG9zaXRpb24sIGhlYWRlckhlaWdodCowLjUvKGhlYWRlckhlaWdodCArIHdpbkhlaWdodCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZ1bmN0aW9uIHBhcmFsYXgoIGVsZW0sIHgsIHksIGtvZWYpIHtcblxuICAgICAgICAgICAgZWxlbS5jc3MoIHtcbiAgICAgICAgICAgICAgICAndHJhbnNmb3JtJzogJ3RyYW5zbGF0ZSgnICsgeCprb2VmICsgJ3B4LCAnICsgeSprb2VmICsgICdweCApJ1xuICAgICAgICAgICAgfSApO1xuICAgICAgICB9O1xuXG4gICAgfSk7XG5cbiAgICB2YXIgTmV3cyA9IGZ1bmN0aW9uKG9iaikge1xuXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciBfb2JqID0gb2JqLFxuICAgICAgICAgICAgX2l0ZW0gPSBfb2JqLmZpbmQoICcubmV3c19faXRlbScgKTtcblxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xuICAgICAgICB2YXIgX2NyZWF0ZSA9IGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAgICAgX2l0ZW0uZWFjaCggZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjdXJFbGVtID0gJCggdGhpcyksXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJQaWMgPSBjdXJFbGVtLmZpbmQoICdpbWcnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhY2VFbGVtID0gJzxkaXYgY2xhc3M9XCJuZXdzX19pdGVtLWZhY2VcIj48L2Rpdj4nO1xuXG4gICAgICAgICAgICAgICAgICAgIGN1ckVsZW0ucHJlcGVuZChmYWNlRWxlbSk7XG4gICAgICAgICAgICAgICAgICAgIGN1ckVsZW0ucHJlcGVuZChjdXJQaWMuY2xvbmUoKSk7XG4gICAgICAgICAgICAgICAgICAgIGN1ckVsZW0uZmluZCgnLm5ld3NfX2l0ZW0tZmFjZScpLnByZXBlbmQoY3VyUGljLmNsb25lKCkpO1xuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX2NyZWF0ZSgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAvL3B1YmxpYyBwcm9wZXJ0aWVzXG5cbiAgICAgICAgLy9wdWJsaWMgbWV0aG9kc1xuXG4gICAgICAgIF9pbml0KCk7XG4gICAgfTtcblxuICAgIHZhciBNZW51ID0gZnVuY3Rpb24oIG9iaiApIHtcblxuICAgICAgICAvL3ByaXZhdGUgcHJvcGVydGllc1xuICAgICAgICB2YXIgX29iaiA9IG9iaixcbiAgICAgICAgICAgIF9zaXRlID0gJCggJy5zaXRlJyApLFxuICAgICAgICAgICAgX3dyYXAgPSBfb2JqLmZpbmQoICcubWVudV9fd3JhcCcgKTtcblxuICAgICAgICAvL3ByaXZhdGUgbWV0aG9kc1xuICAgICAgICB2YXIgX2FkZEV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfb2JqLm9uKCB7XG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9vYmoudG9nZ2xlQ2xhc3MoICdvcGVuJyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgX3NpdGUudG9nZ2xlQ2xhc3MoICdibHVyJyApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSApO1xuXG4gICAgICAgICAgICAgICAgX3dyYXAub24oIHtcbiAgICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCBldmVudCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldmVudCA9IGV2ZW50IHx8IHdpbmRvdy5ldmVudDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCBldmVudC5zdG9wUHJvcGFnYXRpb24gKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuY2FuY2VsQnViYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gKTtcblxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF9hZGRFdmVudHMoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgX2luaXQoKTtcbiAgICB9O1xuXG4gICAgdmFyIFNpdGVUaXRsZSA9IGZ1bmN0aW9uKG9iaikge1xuXG4gICAgICAgIC8vcHJpdmF0ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHZhciBfb2JqID0gb2JqO1xuXG4gICAgICAgIC8vcHJpdmF0ZSBtZXRob2RzXG4gICAgICAgIHZhciBfY3JlYXRlTGluZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciBsaW5lID0gX29iai50ZXh0KCkucmVwbGFjZSgvXFxzL2csIFwiXCIpLFxuICAgICAgICAgICAgICAgICAgICBhcnIgPSBsaW5lLnNwbGl0KCcnKSxcbiAgICAgICAgICAgICAgICAgICAgYXJyTGVuZ3RoID0gYXJyLmxlbmd0aDtcblxuICAgICAgICAgICAgICAgIF9vYmoudGV4dCgnJyk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IDA7IGkgPCBhcnJMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBfb2JqLmFwcGVuZCgnPHNwYW4+JyArIGFycltpXSArICc8L3NwYW4+Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIF9pbml0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgX2NyZWF0ZUxpbmUoX29iaik7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIC8vcHVibGljIHByb3BlcnRpZXNcblxuICAgICAgICAvL3B1YmxpYyBtZXRob2RzXG5cbiAgICAgICAgX2luaXQoKTtcbiAgICB9O1xuXG59KTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
