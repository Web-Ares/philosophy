"use strict";$(function(){$(function(){new n,$(".menu").each(function(){new e($(this))}),$(".news").each(function(){new t($(this))})});var t=function(t){var e=t,n=e.find(".news__item"),i=function(){n.each(function(){var t=$(this),e=t.find("img"),n=t.find(".news__item-wrap");n.prepend(e.clone())})},o=function(){i()};o()},e=function(t){var e=t,n=$(".site"),i=e.find(".menu__wrap"),o=function(){e.on({click:function(){e.toggleClass("open"),n.toggleClass("blur")}}),i.on({click:function(t){var t=t||window.event;t.stopPropagation?t.stopPropagation():t.cancelBubble=!0}})},s=function(){o(),i.mCustomScrollbar()};s()},n=function(t){var e=$(".site__title"),n=$(".spinner"),i=$("body"),o=function(){$(window).on({load:function(){setTimeout(function(){n.addClass("hide"),setTimeout(function(){n.remove()},500)},1e3)},resize:function(){s()}})},s=function(){var t=$(".collection").offset().top,e=$(".collection").height(),n=$(".must-have").offset().top,o=$(".must-have").height(),s=$(".must-have__bg").eq(0).offset().top,a=$(".must-have__bg").eq(0).height(),f=$(".must-have__bg").eq(1).offset().top,l=$(".must-have__bg").eq(1).height(),u=$(".most-wanted").offset().top,h=$(".most-wanted").height(),_=$(".sale").offset().top,r=$(".sale").height(),p=$(".site__header").offset().top,g=$(".site__header").height(),m=$(window).height();i.mCustomScrollbar({callbacks:{whileScrolling:function(){var i=parseInt(-1*this.mcs.top);t+e>=i&&m+i>=t&&(c($(".collection .site__title"),0,i-(t-m),.3*e/(e+m)),c($(".collection__pic"),0,i-(t-m),.15*e/(e+m)),c($(".collection__wrap"),i-(t-m),0,.05*e/(e+m))),n+o>=i&&m+i>=n&&c($(".must-have .site__title"),0,i-(n-m),.3*o/(o+m)),s+a>=i&&m+i>=s&&c($(".must-have__bg").eq(0),0,i-(s-m),a*-.1/(a+m)),f+l>=i&&m+i>=f&&c($(".must-have__bg").eq(1),0,i-(n-m),.1*l/(l+m)),u+h>=i&&m+i>=u&&c($(".most-wanted .site__title"),0,i-(u-m),.3*h/(h+m)),_+r>=i&&m+i>=_&&(c($(".sale .site__title"),0,i-(_-m),.3*r/(r+m)),c($(".sale__bg"),0,i-(_-m),.2*r/(r+m))),p+g>=i&&m+i>=p&&c($(".site__header-bg"),0,i,.5*g/(g+m))}}})},a=function(t){var e=t.text().replace(/\s/g,""),n=e.split(""),i=n.length;t.text("");for(var o=0;i>o;o++)t.append("<span>"+n[o]+"</span>")},c=function(t,e,n,i){t.css({transform:"translate("+e*i+"px, "+n*i+"px )"})},f=function(){o(),s(),e.each(function(){a($(this))})};f()}});
//# sourceMappingURL=data:application/json;base64,
