"use strict";$(function(){$(function(){$(window).on({load:function(){$(".spinner").addClass("hide")}}),$(".collection").each(function(){new n($(this))}),$(".site__header").each(function(){new c($(this))}),$(".site__title").each(function(){new a($(this))}),$(".menu__btn").each(function(){new e($(this))}),$(".must-have").each(function(){new o($(this))}),$(".most-wanted").each(function(){new i($(this))}),$(".sale").each(function(){new s($(this))}),$(".news").each(function(){new t($(this))})});var n=function(n){var t=n,o=t.find(".site__title"),i=t.find(".collection__pic"),s=t.find(".collection__wrap"),e=.15,c=.05,a=.3,f=function(){$(window).on({scroll:function(){var n=$(this).scrollTop();o.css({transform:"translate(0px, "+n*a+"px )"}),i.css({transform:"translate(0px, "+n*e+"px )"}),s.css({transform:"translate("+n*c+"px, 0px )"})}})},r=function(){f()};r()},t=function(n){var t=n,o=t.find(".news__item"),i=function(){o.each(function(){var n=$(this),t=n.find("img"),o='<div class="news__item-face"></div>';n.prepend(o),n.prepend(t.clone()),n.find(".news__item-face").prepend(t.clone())})},s=function(){i()};s()},o=function(n){var t=n,o=t.offset().top,i=t.find(".site__title"),s=t.find(".must-have__item").eq(0),e=t.find(".must-have__item").eq(1),c=-.1,a=.1,f=.3;s=s.find(".must-have__bg"),e=e.find(".must-have__bg");var r=function(){$(window).on({scroll:function(){var n=$(this).scrollTop()-o+$(window).height();i.css({transform:"translate(0px, "+n*f+"px )"}),s.css({transform:"translate(0px, "+n*c+"px )"}),e.css({transform:"translate(0px, "+n*a+"px )"})}})},l=function(){r()};l()},i=function(n){var t=n,o=t.offset().top,i=t.find(".site__title"),s=.3,e=function(){$(window).on({scroll:function(){var n=$(this).scrollTop()-o+$(window).height();i.css({transform:"translate(0px, "+n*s+"px )"})}})},c=function(){e()};c()},s=function(n){var t=n,o=t.offset().top,i=t.find(".site__title"),s=t.find(".sale__bg"),e=(t.find(".sale__item"),.3),c=.15,a=function(){$(window).on({scroll:function(){var n=$(this).scrollTop()-o+$(window).height();i.css({transform:"translate(0px, "+n*e+"px )"}),s.css({transform:"translate(0px, "+n*c+"px )"})}})},f=function(){a()};f()},e=function(n){var t=n,o=$(".site"),i=t.parent(),s=function(){t.on({click:function(){i.addClass("open"),o.addClass("blur")}}),$("body").on({click:function(){i.removeClass("open"),o.removeClass("blur")}}),i.on({click:function(n){var n=n||window.event;n.stopPropagation?n.stopPropagation():n.cancelBubble=!0}})},e=function(){s()};e()},c=function(n){var t=n,o=t.find(".site__header-bg"),i=.5,s=t.find(".philosophy"),e=function(){$(window).on({scroll:function(){var n=$(this).scrollTop();o.css({transform:"translate(0px, "+n*i+"px )"}),c(n)}})},c=function(n){n>=t.scrollTop()&&n<t.height()?s.addClass("philosophy_show"):s.removeClass("philosophy_show")},a=function(){e(),c($(window).scrollTop())};a()},a=function(n){var t=n,o=function(){var n=t.text().replace(/\s/g,""),o=n.split(""),i=o.length;t.text("");for(var s=0;i>s;s++)t.append("<span>"+o[s]+"</span>")},i=function(){o(t)};i()}});
//# sourceMappingURL=data:application/json;base64,
