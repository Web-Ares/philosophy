"use strict";$(function(){$(function(){function r(n,t,i,o){n.css({transform:"translate("+t*o+"px, "+i*o+"px )"})}$(window).on({load:function(){setTimeout(function(){$(".spinner").addClass("hide")},1e3)}}),$(".collection").each(function(){new n($(this))}),$(".site__header").each(function(){new c($(this))}),$(".site__title").each(function(){new a($(this))}),$(".menu").each(function(){new e($(this))}),$(".must-have").each(function(){new i($(this))}),$(".most-wanted").each(function(){new o($(this))}),$(".sale").each(function(){new s($(this))}),$(".news").each(function(){new t($(this))}),$("body").mCustomScrollbar({callbacks:{whileScrolling:function(){var n=parseInt(-1*this.mcs.top);$(".site__header")[0].obj.paralax(n),r($(".collection .site__title"),0,n,.3),r($(".collection__pic"),0,n,.15),r($(".collection__wrap"),n,0,.05)}}})});var n=function(n){var t=n,i=t.find(".site__title"),o=t.find(".collection__pic"),s=t.find(".collection__wrap"),e=.15,c=.05,a=.3,r=function(){$(window).on({scroll:function(){var n=$(this).scrollTop();i.css({transform:"translate(0px, "+n*a+"px )"}),o.css({transform:"translate(0px, "+n*e+"px )"}),s.css({transform:"translate("+n*c+"px, 0px )"})}})},f=function(){r()};f()},t=function(n){var t=n,i=t.find(".news__item"),o=function(){i.each(function(){var n=$(this),t=n.find("img"),i='<div class="news__item-face"></div>';n.prepend(i),n.prepend(t.clone()),n.find(".news__item-face").prepend(t.clone())})},s=function(){o()};s()},i=function(n){var t=n,i=t.offset().top,o=t.find(".site__title"),s=t.find(".must-have__item").eq(0),e=t.find(".must-have__item").eq(1),c=-.1,a=.1,r=.3;s=s.find(".must-have__bg"),e=e.find(".must-have__bg");var f=function(){$(window).on({scroll:function(){var n=$(this).scrollTop()-i+$(window).height();o.css({transform:"translate(0px, "+n*r+"px )"}),s.css({transform:"translate(0px, "+n*c+"px )"}),e.css({transform:"translate(0px, "+n*a+"px )"})}})},l=function(){f()};l()},o=function(n){var t=n,i=t.offset().top,o=t.find(".site__title"),s=.3,e=function(){$(window).on({scroll:function(){var n=$(this).scrollTop()-i+$(window).height();o.css({transform:"translate(0px, "+n*s+"px )"})}})},c=function(){e()};c()},s=function(n){var t=n,i=t.offset().top,o=t.find(".site__title"),s=t.find(".sale__bg"),e=(t.find(".sale__item"),.3),c=.15,a=function(){$(window).on({scroll:function(){var n=$(this).scrollTop()-i+$(window).height();o.css({transform:"translate(0px, "+n*e+"px )"}),s.css({transform:"translate(0px, "+n*c+"px )"})}})},r=function(){a()};r()},e=function(n){var t=n,i=$(".site"),o=t.find(".menu__wrap"),s=function(){t.on({click:function(){t.toggleClass("open"),i.toggleClass("blur")}}),o.on({click:function(n){var n=n||window.event;n.stopPropagation?n.stopPropagation():n.cancelBubble=!0}})},e=function(){s()};e()},c=function(n){var t=this,i=n,o=i.find(".site__header-bg"),s=.5,e=function(){$(window).on({scroll:function(){var n=$(this).scrollTop();o.css({transform:"translate(0px, "+n*s+"px )"})}})},c=function(n){o.css({transform:"translate(0px, "+n*s+"px )"})},a=function(){e(),i[0].obj=t};t.paralax=function(n){c(n)},a()},a=function(n){var t=n,i=function(){var n=t.text().replace(/\s/g,""),i=n.split(""),o=i.length;t.text("");for(var s=0;o>s;s++)t.append("<span>"+i[s]+"</span>")},o=function(){i(t)};o()}});
//# sourceMappingURL=data:application/json;base64,
